<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Test Blog</title>
    <url>/2020/09/16/test_blog/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>2019.7.9 Summary</title>
    <url>/2020/09/16/2019.7.9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><p>这里主要是想对接下来两个月的时间做一些具体的规划，主要还是分为两个部分：CS和GNSS部分 具体希望有两个部分：看书和项目<br><a id="more"></a></p>
<hr>
<p>CS书籍部分就直接参考：（那个从算法数据结构以及软件开发能力两方面进行描述的博客）</p>
<ul>
<li style="list-style: none"><input type="checkbox"> C语言程序设计书籍</li>
<li style="list-style: none"><input type="checkbox"> 深入理解计算机系统  </li>
</ul>
<p>GNSS书籍直接参考：（这部分主要参考轨道的书籍以及各种论文文献吧）</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> 那本轨道的书</li>
<li style="list-style: none"><input type="checkbox"> 通过老师出版的那本书掌握有关PPP及模糊度固定及PPP-RTK的相关内容</li>
<li style="list-style: none"><input type="checkbox"> 强哥发的一些有关轨道的论文</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Flask Study:Python mgic method and Local ocalStack ocalProxy in Werkzeug</title>
    <url>/2020/02/10/Flask-Study-Python-mgic-method-and-Local-LocalStack-LocalProxy-in-Werkzeug/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>本篇文章主要记录阅读Flask源码遇到的有关Local以及LocalProxy概念的问题的理解<br>FLask源码记录如下(globals.py)：<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> werkzeug.local <span class="keyword">import</span> LocalProxy</span><br><span class="line"><span class="keyword">from</span> werkzeug.local <span class="keyword">import</span> LocalStack</span><br><span class="line"></span><br><span class="line"><span class="comment">#.......</span></span><br><span class="line"><span class="comment">#somthing here</span></span><br><span class="line"><span class="comment">#.......</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context locals</span></span><br><span class="line">_request_ctx_stack = LocalStack()</span><br><span class="line">_app_ctx_stack = LocalStack()</span><br><span class="line">current_app = LocalProxy(_find_app)</span><br><span class="line">request = LocalProxy(partial(_lookup_req_object, <span class="string">"request"</span>))</span><br><span class="line">session = LocalProxy(partial(_lookup_req_object, <span class="string">"session"</span>))</span><br><span class="line">g = LocalProxy(partial(_lookup_app_object, <span class="string">"g"</span>))</span><br></pre></td></tr></table></figure></p>
<p><strong>这里重要的是是声明了几个全局变量，current_app,request,g，这几个变量在flask使用中频繁出现，这里引入这些看似为全局变量的原因，本人理解，一个主要原因主要是为了后续视图函数中可以方便的调用本次如http请求过程中的相关参数，而无需传入参数进视图函数</strong><br>这里flask中的路由和视图函数声明过程如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@route("/index")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>其中index()函数即为视图函数</p>
<p>到这里，促使我了解上述全局变量的实现原理的原因在于，首先是开头那段代码完全看不懂在做什么，尤其出现了LocalStack、LocalProxy这些对象不知所云，后搜索发现，Werkzeug（Flask一个依赖的基础模块，wsui协议）中的Local模块中完成了一个十分重要的功能：</p>
<ul>
<li>上述的全局变量在多线程/协程环境中，对于各自线程/协程来说，这些全局变量是互相独立互不影响<br>因此本着学习Python语法的目的，想探究开头代码背后的实现原理</li>
</ul>
<h2 id="Python-继承、魔法方法"><a href="#Python-继承、魔法方法" class="headerlink" title="Python 继承、魔法方法"></a>Python 继承、魔法方法</h2><p>首先，先看Werkzeug的local模块中的源代码，一共有三个比较重要的类：Local、LocalStack、LocalProxy<br>首先看最基础的Local类，源代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'__storage__'</span>, <span class="string">'__ident_func__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        object.__setattr__(self, <span class="string">'__storage__'</span>, &#123;&#125;)</span><br><span class="line">        object.__setattr__(self, <span class="string">'__ident_func__'</span>, get_ident)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.__storage__.items())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, proxy)</span>:</span></span><br><span class="line">        <span class="string">"""Create a proxy for a name."""</span></span><br><span class="line">        <span class="keyword">return</span> LocalProxy(self, proxy)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__storage__.pop(self.__ident_func__(), <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        ident = self.__ident_func__()</span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br></pre></td></tr></table></figure>
<h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p>Object类，这个在python2中用于区分新式类和旧式类，即继承于Object类的为新式类，反之没有继承的为旧式类。新式类和旧式类的一大区别在于，object类声明了许多魔法属性和方法（magic method）这些方法非常有用，除此之外新式类和旧式类在多重继承上也有区别，具体可以搜索相关内容，这里主要说明下object类的概念。<br>而在Python3中所有的类都是继承于object类的，不论是否显示声明继承于Object类<br>可用下述代码测试是类是否继承了Object类的相关属性和方法<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == __main__:</span><br><span class="line">    print(dir(test()))</span><br></pre></td></tr></table></figure></p>
<p>回到Local类的代码上，其中Local类的初始化函数中如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">      object.__setattr__(self, <span class="string">'__storage__'</span>, &#123;&#125;)</span><br><span class="line">      object.__setattr__(self, <span class="string">'__ident_func__'</span>, get_ident)</span><br></pre></td></tr></table></figure></p>
<p>这里有几个问题:</p>
<ul>
<li>通过object类名直接调用函数的含义</li>
<li><strong>setattr</strong>函数的含义</li>
</ul>
<h3 id="Python继承"><a href="#Python继承" class="headerlink" title="Python继承"></a>Python继承</h3><p>对于上述的第一个问题，即是调用父类的相应同名方法，这在子类构造函数需要调用父类的构造函数中尤为常见，但是这应该是比较老的写法，对于Python3来说，推荐使用super的写法<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">father</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Old Method(python2)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sonA</span><span class="params">(father)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        father.__init__(self)</span><br><span class="line">        <span class="comment"># son init here</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Use super</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sonB</span><span class="params">(father)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(sonB,self).__init__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sonC</span><span class="params">(father)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br></pre></td></tr></table></figure></p>
<h3 id="Python魔法方法"><a href="#Python魔法方法" class="headerlink" title="Python魔法方法"></a>Python魔法方法</h3><p>对于第二个问题，有关<strong>setattr</strong>函数的含义,这个是object类中定义的魔法方法，在某些特定情况下会调用这些函数，这里<strong>setattr</strong>即是在对象进行属性设定会调用该函数进行设定，具体的魔法方法可以参考下述链接：<br>参考着篇文章<a href="https://rszalski.github.io/magicmethods/#appendix1" target="_blank" rel="noopener">python magic method</a><br>里面对python的各种魔法方法都进行了详细介绍</p>
<p>这里又引出了第三个问题:<br><strong>Local类这里设置属性的时候为啥非要使用父类的object类？</strong><br>这里主要是为了避免无限递归造成的堆栈溢出错误<br>如果这里采用直接属性赋值的方式，即<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 这里实际上调用的是 self.__setattr()方法</span></span><br><span class="line">    self.storage = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">    ident = self.__ident_func__()</span><br><span class="line">    storage = self.__storage__</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        storage[ident][name] = value</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        storage[ident] = &#123;name: value&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，<strong>setattr</strong>方法中又调用了self.<strong>storage</strong>,在这里又会调用<strong>setattr</strong>的方法，陷入无限递归,因此这里必须调用原有的父类Object类中的设置属性的方法</p>
<h2 id="Local类、LocalStack类、LocalProxy类"><a href="#Local类、LocalStack类、LocalProxy类" class="headerlink" title="Local类、LocalStack类、LocalProxy类"></a>Local类、LocalStack类、LocalProxy类</h2><p>到这里，看懂这段Loal类的创建语法上已经没有问题了，接下来就是Local类的设计思路：<br>Local目的是为了实现在多线程/协程环境下能够提供单线程/协程环境内的的使用的全局变量（同名），因此Local实际上是封装了各个线程内的同名变量，并用线程/协程的id来区分，在获取的时候通过获取当前线程/协程的id来获取对应的变量。<br>其中可以看到storage即是Local类用于存储各个线程/协程变量的字典数据结构</p>
<p>LocalStack类则是基于Local实现的栈结构</p>
<p>LocalProxy则是实现了对local对象以及可执行函数的一个代理，即代理类会将所有受到的操作都转移给其代理对象进行，但是必须注意的是，这里不能直接对代理对象进行赋值（一开始的理解就卡在这里，以为赋值为其他后依然是对原代理对象进行操作，实际上并不是，因为如果进行赋值后，会在调用该操作的区域生成了同名的局部变量遮盖了原有的代理变量，因此这样的操作违反了本意，也无法对原有代理对象进行修改），一般需要通过原始的Local对象进行获取操作，或者是LocalStack类的对象。<br>结合具体使用LocalProxy的例子来看<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_local</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" Local实例的代理 """</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Request</span><span class="params">(object)</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,i)</span>:</span></span><br><span class="line">            self.a = i</span><br><span class="line"></span><br><span class="line">    l = Local()</span><br><span class="line">    my_test = LocalProxy(l, <span class="string">'my_test'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(i)</span>:</span></span><br><span class="line">        <span class="comment"># Local().__storage__[线程/协程标识]['my_test'] = A()</span></span><br><span class="line">        <span class="comment">## 一般来说 每个线程一开始都会有对该变量进行赋值的一个操作,这个操作必须通过Local.对象的方式进行</span></span><br><span class="line">        l.my_test = Request(i)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># lp = __storage__[线程/协程标识]['my_test'], 即lp.a = 1 等价于 给当前线程中的A().a对象赋值</span></span><br><span class="line">        <span class="comment">## 获取值</span></span><br><span class="line">        print(my_test.a)</span><br><span class="line">        <span class="comment">## 改变值 </span></span><br><span class="line">        my_test.b = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        Thread(target=job, args=(i,)).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> l.__storage__.items():</span><br><span class="line">        print(k)</span><br><span class="line">        <span class="keyword">for</span> name, obj <span class="keyword">in</span> v.items():</span><br><span class="line">            print(name, obj.__dict__)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Python</tag>
        <tag>MagicMethod</tag>
        <tag>Local</tag>
      </tags>
  </entry>
  <entry>
    <title>first</title>
    <url>/2018/09/07/first/</url>
    <content><![CDATA[<p>hello world! Welcome to my blog!<br>欢迎来到我的个人技术博客！</p>
]]></content>
  </entry>
</search>
